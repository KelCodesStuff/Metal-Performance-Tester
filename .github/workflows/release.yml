name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

env:
  PROJECT_NAME: Metal-Performance-Tester.xcodeproj
  SCHEME_NAME: Metal-Performance-Tester
  DESTINATION: 'platform=macOS'

jobs:
  release:
    runs-on: macos-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3.0'

      - name: Cache SPM Packages
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
            ${{ github.workspace }}/.build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build Release
        run: |
          xcodebuild clean build \
            -project "${{ env.PROJECT_NAME }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "${{ env.DESTINATION }}" \
            -configuration Release \
            CODE_SIGN_IDENTITY="-" \
            CODE_SIGNING_REQUIRED=YES

      - name: Extract Changelog Entry
        id: changelog
        run: |
          # Extract the changelog entry for this version
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          
          # Find the changelog entry for this version
          CHANGELOG_ENTRY=$(awk "/^## \[$VERSION\]/,/^## \[/ {if(/^## \[$VERSION\]/) next; if(/^## \[/) exit; print}" CHANGELOG.md)
          
          # If not found, try with v prefix
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG_ENTRY=$(awk "/^## \[v$VERSION\]/,/^## \[/ {if(/^## \[v$VERSION\]/) next; if(/^## \[/) exit; print}" CHANGELOG.md)
          fi
          
          # If still not found, try with different format
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG_ENTRY=$(awk "/^## \[$VERSION\]/,/^## \[/ {if(/^## \[$VERSION\]/) next; if(/^## \[/) exit; print}" CHANGELOG.md)
          fi
          
          # Fallback to a default message
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG_ENTRY="Release $VERSION"
          fi
          
          # Set output for use in release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Extracted changelog entry for version $VERSION"

      - name: Create Release Archive
        run: |
          # Find the built executable
          EXECUTABLE=$(find ~/Library/Developer/Xcode/DerivedData -name "Metal-Performance-Tester" -type f | head -1)
          if [ -z "$EXECUTABLE" ]; then
            echo "Executable not found"
            exit 1
          fi
          
          # Create release directory
          mkdir -p release
          cp "$EXECUTABLE" release/
          
          # Create archive
          cd release
          tar -czf ../Metal-Performance-Tester-${{ github.ref_name }}.tar.gz *
          cd ..
          
          echo "Created release archive: Metal-Performance-Tester-${{ github.ref_name }}.tar.gz"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            Metal-Performance-Tester-${{ github.ref_name }}.tar.gz
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            Download the archive and extract:
            ```bash
            tar -xzf Metal-Performance-Tester-${{ github.ref_name }}.tar.gz
            chmod +x Metal-Performance-Tester
            ```
            
            ## Usage
            
            ```bash
            ./Metal-Performance-Tester --help
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Changelog
        run: |
          # Update the changelog to move [Unreleased] to the new version
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          DATE=$(date +%Y-%m-%d)
          
          # Create a temporary file with the updated changelog
          awk -v version="$VERSION" -v date="$DATE" '
            /^## \[Unreleased\]/ {
              print "## [" version "] - " date
              next
            }
            /^## \[Unreleased\]/ {
              print "## [" version "] - " date
              next
            }
            { print }
          ' CHANGELOG.md > CHANGELOG_temp.md
          
          # Replace the original file
          mv CHANGELOG_temp.md CHANGELOG.md
          
          # Commit the updated changelog
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "Update changelog for release $VERSION" || exit 0
          git push
