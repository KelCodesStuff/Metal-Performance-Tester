# A descriptive name for the workflow.
name: Build and Test

# Define when this workflow should be triggered
on:
  push:
    branches: [ main, develop ]  # Run on pushes to main and develop branches
  pull_request:
    branches: [ main, develop ]  # Run on PRs targeting main and develop branches

# Global environment variables used throughout the workflow
env:
  PROJECT_NAME: Metal-Performance-Tester.xcodeproj  # Xcode project file name
  SCHEME_NAME: Metal-Performance-Tester            # Xcode scheme to build and test
  DESTINATION: 'platform=macOS'  # macOS platform for command-line tool

# Define the jobs to run
jobs:
  # Build job: Compiles the project
  build:
    runs-on: macos-latest  # Use latest macOS runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4  # Fetch repository content

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3.0'  # Specify Xcode version for consistency

      # Cache Swift Package Manager dependencies to speed up builds
      - name: Cache SPM Packages
        id: cache-spm
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ${{ github.workspace }}/.build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-


      # Build the project with automatic code signing for CI purposes
      - name: Build
        run: |
          xcodebuild clean build \
            -project "${{ env.PROJECT_NAME }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "${{ env.DESTINATION }}" \
            -configuration Debug \
            CODE_SIGN_IDENTITY="-" \
            CODE_SIGNING_REQUIRED=YES

      # Test basic functionality of the command-line tool
      - name: Test Basic Functionality
        run: |
          # Find and test the built executable
          EXECUTABLE=$(find ~/Library/Developer/Xcode/DerivedData -name "Metal-Performance-Tester" -type f | head -1)
          if [ -n "$EXECUTABLE" ]; then
            echo "Found executable at: $EXECUTABLE"
            "$EXECUTABLE" --help
          else
            echo "Executable not found"
            exit 1
          fi

  # Test job: Run basic functionality tests for the command-line tool
  test:
    needs: build  # Only run tests after successful build
    runs-on: macos-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3.0'

      # Reuse cached dependencies from build job
      - name: Cache SPM Packages
        id: cache-spm
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ${{ github.workspace }}/.build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      # Build the project
      - name: Build
        run: |
          xcodebuild build \
            -project "${{ env.PROJECT_NAME }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "${{ env.DESTINATION }}" \
            -configuration Debug \
            CODE_SIGN_IDENTITY="-" \
            CODE_SIGNING_REQUIRED=YES

      # Run unit tests
      - name: Run Unit Tests
        run: |
          xcodebuild test \
            -project "${{ env.PROJECT_NAME }}" \
            -scheme "${{ env.SCHEME_NAME }}" \
            -destination "${{ env.DESTINATION }}" \
            -configuration Debug \
            CODE_SIGN_IDENTITY="-" \
            CODE_SIGNING_REQUIRED=YES

      # Test command-line tool functionality
      - name: Test Command Line Interface
        run: |
          # Find the built executable
          EXECUTABLE=$(find ~/Library/Developer/Xcode/DerivedData -name "Metal-Performance-Tester" -type f | head -1)
          if [ -z "$EXECUTABLE" ]; then
            echo "Executable not found"
            exit 1
          fi
          
          echo "Found executable at: $EXECUTABLE"
          
          # Test help command
          echo "Testing help command..."
          "$EXECUTABLE" --help
          
          # Test invalid command (should show help)
          echo "Testing invalid command..."
          "$EXECUTABLE" --invalid-command || true
          
          # Test version info (if available)
          echo "Testing version info..."
          "$EXECUTABLE" --version || echo "Version command not implemented"

      # Store test results
      - name: Store Test Results
        uses: actions/upload-artifact@v4
        if: always()  # Upload test results even if tests fail
        with:
          name: Metal-Performance-Tester-test-results
          path: ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult

      # Store build artifacts
      - name: Store Build Artifacts
        uses: actions/upload-artifact@v4
        if: always()  # Upload artifacts even if tests fail
        with:
          name: Metal-Performance-Tester-build
          path: ~/Library/Developer/Xcode/DerivedData/*/Build/Products/Debug/Metal-Performance-Tester
